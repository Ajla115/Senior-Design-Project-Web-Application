{
  "swagger": "2.0",
  "info": {
    "description": "Swagger documentation for Senior Design Project. For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "Senior Design Project",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "127.0.0.1/Senior-Design-Project-Web-Application/backend/rest/",
  "basePath": "",
  "tags": [
    {
      "name": "register",
      "description": "Register new user"
    },
    {
      "name": "login",
      "description": "Login existing user"
    },
    {
      "name": "users",
      "description": "Operations about every user"
    },
    {
      "name": "ig_accounts",
      "description": "Operations about every instagram account"
    }
  ],
  "schemes": ["http", "https"],

  "paths": {
    "/register": {
      "post": {
        "tags": ["register"],
        "summary": "Register",
        "description": "Create a new user",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's credentials",
            "required": true,
            "schema": {
              "$ref": "#definitions/Register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Failed registration"
          }
        }
      }
    },

    "/login": {
      "post": {
        "tags": ["login"],
        "summary": "Login",
        "description": "Login existing user",
        "operationId": "logInUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's credentials",
            "required": true,
            "schema": {
              "$ref": "#definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login"
          },
          "400": {
            "description": "Login failed"
          }
        }
      }
    },

    "/users/{id}": {
      "put": {
        "tags": ["users"],
        "summary": "Update users",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID whose data needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update user",
            "required": true,
            "schema": {
              "$ref": "#definition/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is succesfully updated."
          },

          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },

      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "description": "",
        "operationId": "getUserByID",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "The ID whose data needs to be fetched.",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully fetched.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully deleted."
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "tags": ["ig_accounts"],
        "summary": "Get all Instagram accounts",
        "description": "",
        "operationId": "getAllIGAccounts",
        "produces": ["application/json", "application/xml"],
        "responses": {
          "200": {
            "description": "All accounts have been successfuly fetched.",
            "schema": {
              "$ref": "#definitions/IGAccount"
            }
          },
          "400": {
            "description": "Invalid API request"
          },
          "404": {
            "description": "Accounts not found"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": ["ig_accounts"],
        "summary": "Get IG Account data by ID",
        "description": "",
        "operationId": "getIGAccountByID",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "The ID whose data needs to be fetched.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Data has been successfully fetched.",
            "schema": {
              "$ref": "#definitions/IGAccount"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ID not found"
          }
        }
      }, 
      "put" : {
          "tags": ["ig_accounts"],
          "summary": "Update IG account data",
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID whose data needs to be updated",
              "required": true,
              "type": "integer"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Update accounyt",
              "required": true,
              "schema": {
                "$ref": "#definitions/UpdateIGAccount"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "IG Account is succesfully updated."
            },
  
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "ID not found"
            }
          }
        }
      },
    
    "/accounts/username/{username}": {
      "get": {
        "tags": ["ig_accounts"],
        "summary": "Get IG account by username",
        "description": "",
        "operationId": "getIGAccountByUsername",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The username whose data needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": ".#definitions/IGAccount"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
    },

    "securityDefinitions": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    
    "definitions": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Register": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Register"
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Login"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },

      "UpdateUser": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "xml": {
          "name": "UpdateUser"
        }
      },
      "IGAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "post_number": {
            "type": "integer"
          },
          "followers_number": {
            "type": "integer"
          },
          "followings_number": {
            "type": "integer"
          },
          "date_and_time": {
            "type": "string"
          },
          "stats": {
            "type": "integer"
          }
        },
        "xml": {
          "name": "IGAccount"
        }
      },
      "UpdateIGAccount": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "post_number": {
            "type": "integer"
          },
          "followers_number": {
            "type": "integer"
          },
          "followings_number": {
            "type": "integer"
          },
          "date_and_time": {
            "type": "string"
          },
          "stats": {
            "type": "integer"
          }
        },
        "xml": {
          "name": "UpdateIGAccount"
        }
      }
    },

    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  }

